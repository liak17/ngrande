Oimport React, { useState } from 'react';
import { View, Text, StyleSheet, ScrollView, ActivityIndicator } from 'react-native';
iOmport { TextInput } from 'react-native-paper';
import * as ViewsNames from '../const/ViewsNames.js';
imOBport axios from 'axios';
impoOOrt BotonComponente from '../componentes/BotonComponente';
import {setValue} from '../utils/index.js';

n
c
const iniciarSesion = async ({ cedula, password }, navigation,
  setIsLoading, setValue) => {

  if (cedula !== '' && password !== '') {

    const url = 'https://infinite-crag-10539.herokuapp.com/validate/login'

    try {
      setIsLoading(true);
      const resultado = await
        axios.post(url,
          {
            whereClause: [
              {
                "attr": "ruc",
                "value": "22270222138"
              }, {
                "attr": "password", "value": "1234"
              }]
          }).then(() => {
            setIsLoading(false);
            alert('bienvenido')
            setValue('isLogin', true)
            navigation.navigate(ViewsNames.DashboardScreenName)
          }).catch(error => {
            alert('verifica los datos')
            setIsLoading(false);
          });

    } catch (error) {
      alert('verifica los datos')
      setIsLoading(false);
    }

  } else {
    alert('Por favor rellena los datos')

  }

};




const LoginScreen = ({ navigation, login, setlogin,
  isLoading, setIsLoading, errores, seterrores }) => {

  const spinner = isLoading ? (<View>
    <Text style={styles.subtitulo}>Validando espere porfavor </Text>
    <ActivityIndicator size="large" color="#FA4141" />
  </View>
  ) : null;
  const { cedula, password, isLogin } = login
  isLogin ? navigation.navigate(ViewsNames.DashboardScreenName) : null;
  if (errores.length > 0) {
    const erroresLogin = errores.filter(({ screen }) =>
      screen === ViewsNames.LoginScreenName);
    const erroresComponent = erroresLogin.map(({ error }, i) =>
      (<Text key={i}>{error}</Text>))
  }



  return (
    <ScrollView>
      <View style={{
        paddingTop: 10, justifyContent: 'center',
        marginBottom: 0,
        alignItems: 'center', flexDirection: 'row-reverse'
      }}>
        {spinner}
        {errores.length > 0 ? erroresComponent : null}
      </View>
      <View style={styles.container}>


        <Text style={styles.titulo}>INICIAR SESION</Text>
        <TextInput
          label="Cedula"
          mode="outlined"
          defaultValue={cedula}
          onChangeText={value => setValue('cedula', value, setlogin)}
        />
        <TextInput
          label="Contraseña"
          mode="outlined"
          defaultValue={password}
          onChangeText={value => setValue('password', value, setlogin)}
        />
        <View style={styles.containerBotones}>
          <Text style={styles.subtitulo}>¿Olvidaste la contraseña?</Text>
          <BotonComponente
            texto="Iniciar Sesión"
            onPress={() => {
              iniciarSesion({ cedula, password },navigation ,setIsLoading, setValue)
            }}

            estilo={styles.botonSecundario}

          />
        </View>
      </View>
    </ScrollView>
  )
}

const styles = StyleSheet.create({
  botonPrimario: {
    backgroundColor: '#FA4141',
    padding: 18,
    borderRadius: 50,
    fontSize: 14,
    fontFamily: 'Poppins',
    marginStart: 4,
    marginEnd: 8,
  },
  botonSecundario: {
    backgroundColor: '#7755CC',
    padding: 18,
    marginStart: 10,
    borderRadius: 50,
    fontSize: 14,
    marginEnd: 8,
  },
  container: {
    flexDirection: 'column',
    paddingVertical: 15,
    paddingLeft: 16,
    borderBottomWidth: 1,
    alignContent: 'space-between',
    height: '100%',
    marginTop: 0
  },
  containerBotones: {
    marginTop: 100,
    flexDirection: 'row',
    position: 'relative',
    bottom: 30,

  },
  subtitulo: {
    fontSize: 14,
    fontFamily: 'Poppins',
    marginTop: 16,
    marginStart: 16,
  },
  titulo: {
    fontSize: 48,
    fontFamily: 'Poppins',
    fontWeight: 'bold',
    marginTop: 16,
    marginTop: 200,
    marginBottom: 16
  },
  ggg: {
    backgroundColor: '#6C63FF',
  },
});

export default LoginScreen;
